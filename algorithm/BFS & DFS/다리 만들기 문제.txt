#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <iostream>
#include <vector>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <queue>
using namespace std;

bool a[101][101];
int check[101][101];
int d[101][101];
int dx[4] = { 0,-1,0,1 };
int dy[4] = { -1,0,1,0 };
int k = 1;
int n;
queue<pair<int, int>> q;
void dfs(int i, int j) {
	if (a[i][j] == 1 && check[i][j] == 0) {
		check[i][j] = k;
		for (int r = 0; r < 4; r++) {
			int nx = i + dx[r];
			int ny = j + dy[r];
			if (0 < nx && nx <= n && 0 < ny && ny <= n) {
				dfs(nx, ny);
			}
		}
	}
}

void bfs() {
	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();
		for (int r = 0; r < 4; r++) {
			int nx = x + dx[r];
			int ny = y + dy[r];
			if (0 < nx && nx <= n && 0 < ny && ny <= n) {
				if (d[nx][ny] == -1 && a[nx][ny] == 0) {
					q.push(make_pair(nx, ny));
					d[nx][ny] = d[x][y] + 1;
					check[nx][ny] = check[x][y];
				}
			}
		}
	}
}

int main() {
	ios::sync_with_stdio(false);

	scanf("%d", &n);

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			scanf("%d", &a[i][j]);
			d[i][j] = -1;
			if (a[i][j] == 1) {
				q.push(make_pair(i, j));
				d[i][j] = 0;
			}
		}
	}

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			if (check[i][j] == 0 && a[i][j] == 1) {
				dfs(i, j);
				k++;
			}
		}
	}

	bfs();

	int result = -1;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			for (int r = 0; r < 4; r++) {
				int nx = i + dx[r];
				int ny = j + dy[r];
				if (0 < nx && nx <= n && 0 < ny && ny <= n) {
					if (check[i][j] != check[nx][ny]) {
						if (result == -1 || result > d[i][j] + d[nx][ny]) {
							result = d[i][j] + d[nx][ny];
						}
					}
				}
			}
		}
	}

	printf("%d\n", result);
	return 0;
}