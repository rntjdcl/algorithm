#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <iostream>
#include <vector>
#include <cstring>
#include <cstdio>
#include <queue>
using namespace std;

vector<int> a[20001];
int check[20001];
void bfs(int start, int ch) {
	queue<int> q;
	check[start] = ch;
	q.push(start);
	while (!q.empty()) {
		int node = q.front();
		q.pop();
		if (check[node] != 0)
			ch = check[node];
		for (int i = 0; i<a[node].size(); i++) {
			int next = a[node][i];
			if (check[next] == false) {
				q.push(next);
				check[next] = 3-ch;
			}
		}
	}
}

int main() {
	ios::sync_with_stdio(false);
	int n, m, k, j=0;
	scanf("%d", &k);
	for (int r = 0; r < k; r++) {
		memset(check, false, sizeof(check));
		memset(a, false, sizeof(a));
		scanf("%d %d ", &n, &m);
		for (int i = 0; i<m; i++) {
			int u, v;
			scanf("%d %d", &u, &v);
			a[u].push_back(v);
			a[v].push_back(u);
		}
		for (int i = 1; i <= n; i++) {
			sort(a[i].begin(), a[i].end());
		}

		for (int i = 1; i <= n; i++) {
			if(check[i]==0)
				bfs(i,1);
		}

		int ch = 0;
		j = 0;
		for (int i = 1; i <= n; i++) {
			queue<int> q;
			q.push(i);
			while (!q.empty()) {
				int node = q.front();
				q.pop();
				for (int g = 0; g<a[node].size(); g++) {
					int next = a[node][g];
					if (check[next] == check[node]) {
						j++;
						break;
					}
				} 
			}
		}
		if (j == 0)
			printf("YES\n");
		else
			printf("NO\n");
	}
	return 0;
}