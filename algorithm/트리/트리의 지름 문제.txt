#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <iostream>
#include <vector>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <queue>
using namespace std;
struct Edge {
	int to;
	int cost;
	Edge(int to, int cost) : to(to), cost(cost) {}
};
vector<Edge> a[100001];
int depth[100001];
bool check[100001];
void bfs(int start) {
	memset(depth, 0, sizeof(depth));
	memset(check, false, sizeof(check));
	queue<int> q;
	check[start] = true; q.push(start);
	while (!q.empty()) {
		int x = q.front(); q.pop();
		for (int y = 0; y < a[x].size(); y++) {
			Edge &e = a[x][y];
			if (check[e.to] == false) {
				depth[e.to] = depth[x] + e.cost;
				check[e.to] = true;
				q.push(e.to);
			}
		}
	}
}
int main() {
	ios::sync_with_stdio(false);
	int n;
	cin >> n;
	for (int i = 1; i <= n; i++) {
		int x;
		cin >> x;
		while (true) {
			int y, z;
			cin >> y;
			if (y == -1) break;
			cin >> z;
			a[x].push_back(Edge(y, z));
		}
	}
	bfs(1);
	int max = 1;
	for (int i = 2; i <= n; i++) {
		if (depth[i] > depth[max]) {
			max = i;
		}
	}
	bfs(max);

	max = depth[1];
	for (int i = 2; i <= n; i++) {
		if (max < depth[i]) {
			max = depth[i];
		}
	}
	printf("%d\n", max);
	
	return 0;
}